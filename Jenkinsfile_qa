pipeline {
    triggers {
        cron('30 20 * * 0-5')
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
        disableConcurrentBuilds()
        skipDefaultCheckout()
    }

    agent {
        kubernetes {
            label 'cypress'
            defaultContainer 'cypress-13-6-6'
        }
    }

    environment {
        TEST_DIR = 'tests/api'
        ALLURE_PATH = 'tests/api/allure-results'
        WORKSPACE_DIR = "${env.WORKSPACE}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Instalar Depend칡ncias') {
            steps {
                dir("${TEST_DIR}") {
                    sh '''
                        rm -rf node_modules package-lock.json
                        npm cache clean --force
                        mkdir -p /home/jenkins/.cache/Cypress
                        chmod -R 777 /home/jenkins/.cache/Cypress
                        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | tee /etc/apt/trusted.gpg.d/google.asc >/dev/null
                        mkdir -p /usr/share/man/man1/
                        apt update && apt install -y default-jre openjdk-17-jdk zip
                        npm install
                        npm install @shelex/cypress-allure-plugin allure-mocha crypto-js@4.1.1 --save-dev
                    '''
                }
            }
        }

        stage('Executar') {
            steps {
                dir("${TEST_DIR}") {
                    script {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                NO_COLOR=1 npx cypress run \
                                    --headless \
                                    --spec cypress/e2e/**/* \
                                    --browser chrome \
                                    --reporter mocha-allure-reporter
                            '''
                        }
                    }
                }
            }
        }

        stage('Generate Allure Report') {
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                        def hasResults = fileExists("${ALLURE_PATH}") && sh(script: "ls -A ${ALLURE_PATH} | wc -l", returnStdout: true).trim() != "0"

                        if (hasResults) {
                            echo "Gerando relat칩rio Allure..."
                            sh """
                                export JAVA_HOME=\$(dirname \$(dirname \$(readlink -f \$(which java))))
                                export PATH=\$JAVA_HOME/bin:/usr/local/bin:\$PATH

                                allure generate ${ALLURE_PATH} --clean --output tests/api/allure-report
                                cd tests/api
                                zip -r allure-results-${BUILD_NUMBER}-\$(date +"%d-%m-%Y").zip allure-results
                            """
                        } else {
                            echo "丘멆잺 Diret칩rio ${ALLURE_PATH} est치 ausente ou vazio. Pulando gera칞칚o do relat칩rio."
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                sh 'chmod -R 777 $WORKSPACE/tests/api || true'

                // Envio para o plugin Allure (se houver resultados)
                if (fileExists("${ALLURE_PATH}") && sh(script: "ls -A ${ALLURE_PATH} | wc -l", returnStdout: true).trim() != "0") {
                    allure includeProperties: false, jdk: '', results: [[path: "${ALLURE_PATH}"]]
                } else {
                    echo "丘멆잺 Resultados do Allure n칚o encontrados ou vazios, plugin Allure n칚o ser치 acionado."
                }

                // Arquivamento do zip (s칩 se o zip realmente existir)
                def zipExists = sh(script: "ls tests/api/allure-results-*.zip 2>/dev/null || true", returnStdout: true).trim()
                if (zipExists) {
                    archiveArtifacts artifacts: 'tests/api/allure-results-*.zip', fingerprint: true
                } else {
                    echo "丘멆잺 Nenhum .zip de Allure encontrado para arquivamento. Pulando archiveArtifacts."
                }
            }
        }
        success {
            sendTelegram("驕놾잺 Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Success \nLog: \n${env.BUILD_URL}allure")
        }

        unstable {
            sendTelegram("游눢 Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Unstable \nLog: \n${env.BUILD_URL}allure")
        }

        failure {
            sendTelegram("游눤 Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Failure \nLog: \n${env.BUILD_URL}allure")
        }

        aborted {
            sendTelegram("游땬 Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Aborted \nLog: \n${env.BUILD_URL}console")
        }
    }
}
