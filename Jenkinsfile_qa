pipeline {
    triggers {
        cron('30 20 * * 0-5')
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
        disableConcurrentBuilds()
        skipDefaultCheckout()
    }

    agent {
        kubernetes {
            label 'cypress'
            defaultContainer 'cypress-13-6-6'
        }
    }

    environment {
        TEST_DIR = 'tests/api'
        ALLURE_PATH = 'tests/api/allure-results'
        WORKSPACE_DIR = "${env.WORKSPACE}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Instalar Depend칡ncias') {
            steps {
                dir("${TEST_DIR}") {
                    script {
                        sh '''
                            rm -rf node_modules package-lock.json
                            npm cache clean --force
                            mkdir -p /home/jenkins/.cache/Cypress
                            chmod -R 777 /home/jenkins/.cache/Cypress
                            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | tee /etc/apt/trusted.gpg.d/google.asc >/dev/null
                            mkdir -p /usr/share/man/man1/
                            apt update && apt install -y default-jre openjdk-17-jdk zip
                            npm install
                            npm install @shelex/cypress-allure-plugin allure-mocha crypto-js@4.1.1 --save-dev
                        '''
                    }
                }
            }
        }

        stage('Executar') {
            steps {
                dir("${TEST_DIR}") {
                    script {
                        sh '''
                            set +e
                            NO_COLOR=1 npx cypress run \
                                --headless \
                                --config-file=../../cypress.config.js \
                                --spec cypress/e2e/**/* \
                                --reporter mocha-allure-reporter \
                                --browser chrome
                            CYPRESS_EXIT_CODE=$?
                            echo "Cypress finalizado com c칩digo: $CYPRESS_EXIT_CODE"
                            echo $CYPRESS_EXIT_CODE > ../../cypress_exit_code.txt
                            set -e
                        '''
                    }
                }
            }
        }

        stage('Generate Allure Report') {
            steps {
                script {
                    sh '''
                        export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
                        export PATH=$JAVA_HOME/bin:/usr/local/bin:$PATH

                        echo "Copiando resultados para o local esperado..."
                        cp -r tests/api/allure-results/ allure-results/

                        if [ -d "allure-results" ] && [ "$(ls -A allure-results)" ]; then
                            npm install -g allure-commandline
                            allure generate allure-results --clean --output allure-report
                            zip -r allure-results-${BUILD_NUMBER}-$(date +"%d-%m-%Y").zip allure-results
                        else
                            echo "Diret칩rio allure-results n칚o existe ou est치 vazio. Relat칩rio n칚o ser치 gerado."
                        fi
                    '''
                }
            }
        }


//     post {
//         always {
//             script {
//                 sh '''
//                     chmod -R 777 $WORKSPACE
//                     CYPRESS_EXIT_CODE=$(cat cypress_exit_code.txt || echo 0)
//                     echo "C칩digo de sa칤da do Cypress: $CYPRESS_EXIT_CODE"

//                     if [ "$CYPRESS_EXIT_CODE" != "0" ]; then
//                         echo "Build marcado como UNSTABLE devido a falhas nos testes."
//                         currentBuild.result = 'UNSTABLE'
//                     fi
//                 '''

//                 // Executa publica칞칚o do relat칩rio
//                 allure includeProperties: false, jdk: '', results: [[path: 'allure-results']]
//                 archiveArtifacts artifacts: 'allure-results-*.zip', fingerprint: true
//             }
//         }

//         success {
//             sendTelegram("驕놾잺 Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Success \nLog: \n${env.BUILD_URL}allure")
//         }

//         unstable {
//             sendTelegram("游눢 Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Unstable \nLog: \n${env.BUILD_URL}allure")
//         }

//         failure {
//             sendTelegram("游눤 Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Failure \nLog: \n${env.BUILD_URL}allure")
//         }

//         aborted {
//             sendTelegram("游땬 Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Aborted \nLog: \n${env.BUILD_URL}console")
//         }
//     }
// }

// def sendTelegram(message) {
//     def encodedMessage = URLEncoder.encode(message, "UTF-8")
//     withCredentials([
//         string(credentialsId: 'telegramTokensigpae', variable: 'TOKEN'),
//         string(credentialsId: 'telegramChatIdsigpae', variable: 'CHAT_ID')
//     ]) {
//         httpRequest (
//             consoleLogResponseBody: true,
//             contentType: 'APPLICATION_JSON',
//             httpMode: 'GET',
//             url: "https://api.telegram.org/bot${TOKEN}/sendMessage?text=${encodedMessage}&chat_id=${CHAT_ID}&disable_web_page_preview=true",
//             validResponseCodes: '200'
//         )
//     }
// }
