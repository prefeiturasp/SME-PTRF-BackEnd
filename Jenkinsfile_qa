    pipeline {
        triggers {
            cron('30 20 * * 0-5')
        }

        options {
            buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
            disableConcurrentBuilds()
            skipDefaultCheckout()
        }

        agent {
            kubernetes {
                label 'cypress'
                defaultContainer 'cypress-13-6-6'
            }
        }

        environment {
            TEST_DIR = 'tests/api'
            ALLURE_PATH = 'tests/api/allure-results'
            WORKSPACE_DIR = "${env.WORKSPACE}"
        }

        stages {
            stage('Checkout') {
                steps {
                    checkout scm
                }
            }

            stage('Instalar Depend√™ncias') {
                steps {
                    dir("${TEST_DIR}") {
                        sh '''
                            rm -rf node_modules package-lock.json
                            npm cache clean --force
                            mkdir -p /home/jenkins/.cache/Cypress
                            chmod -R 777 /home/jenkins/.cache/Cypress
                            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | tee /etc/apt/trusted.gpg.d/google.asc >/dev/null
                            mkdir -p /usr/share/man/man1/
                            apt update && apt install -y default-jre openjdk-17-jdk zip
                            npm install
                            npm install @shelex/cypress-allure-plugin allure-mocha crypto-js@4.1.1 --save-dev
                        '''
                    }
                }
            }

            stage('Executar') {
                steps {
                    dir("${TEST_DIR}") {
                        sh '''
                            set +e
                            NO_COLOR=1 npx cypress run \
                                --headless \
                                --spec cypress/e2e/**/* \
                                --browser chrome \
                                --reporter mocha-allure-reporter
                            echo $? > ../../cypress_exit_code.txt
                            set -e
                        '''
                    }
                }
            }

            stage('Generate Allure Report') {
                steps {
                    script {
                        sh """
                            echo "Conte√∫do de ${ALLURE_PATH}:"
                            ls -l ${ALLURE_PATH} || echo "Diret√≥rio n√£o existe"

                            export JAVA_HOME=\$(dirname \$(dirname \$(readlink -f \$(which java))))
                            export PATH=\$JAVA_HOME/bin:/usr/local/bin:\$PATH

                            if [ -d "${ALLURE_PATH}" ] && [ "\$(ls -A ${ALLURE_PATH})" ]; then
                                echo "Gerando relat√≥rio Allure..."
                                allure generate ${ALLURE_PATH} --clean --output tests/api/allure-report
                                cd tests/api
                                zip -r allure-results-${BUILD_NUMBER}-\$(date +"%d-%m-%Y").zip allure-results
                            else
                                echo "Diret√≥rio ${ALLURE_PATH} n√£o existe ou est√° vazio. Relat√≥rio n√£o ser√° gerado."
                            fi
                        """
                    }
                }
            }
        }

        post {
            always {
                script {
                    sh 'chmod -R 777 $WORKSPACE/tests/api || true'
                    def exitCode = sh(script: 'cat cypress_exit_code.txt || echo 0', returnStdout: true).trim()
                    echo "C√≥digo de sa√≠da do Cypress: ${exitCode}"
                    if (exitCode != "0") {
                        currentBuild.result = 'UNSTABLE'
                    }

                    // Caminho relativo para o plugin do Allure
                    allure includeProperties: false, jdk: '', results: [[path: "${ALLURE_PATH}"]]
                    archiveArtifacts artifacts: 'tests/api/allure-results-*.zip', fingerprint: true
                }
            }
        }
    }


        // Voc√™ pode reativar essas se√ß√µes conforme necess√°rio:
        /*
        success {
            sendTelegram("‚òëÔ∏è Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Success \nLog: \n${env.BUILD_URL}allure")
        }

        unstable {
            sendTelegram("üí£ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Unstable \nLog: \n${env.BUILD_URL}allure")
        }

        failure {
            sendTelegram("üí• Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Failure \nLog: \n${env.BUILD_URL}allure")
        }

        aborted {
            sendTelegram("üò• Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Aborted \nLog: \n${env.BUILD_URL}console")
        }
        */
    }
}
