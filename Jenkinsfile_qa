pipeline {
    triggers { cron('30 20 * * 0-5') }

    options {
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
        disableConcurrentBuilds()
        skipDefaultCheckout()
    }

    agent {
        kubernetes {
            label 'cypress'
            defaultContainer 'cypress-13-6-6'
        }
    }

    environment {
        TEST_DIR = 'tests/api'
        CONFIG_PATH = 'tests/api/cypress.config.js'
        EXEC_PATH = 'tests/api/cypress'
        WORKSPACE_DIR = "${env.WORKSPACE}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Instalar Depend√™ncias') {
            steps {
                dir("${TEST_DIR}") {
                    script {
                        sh '''
                            rm -rf node_modules package-lock.json
                            npm cache clean --force
                            mkdir -p /home/jenkins/.cache/Cypress
                            chmod -R 777 /home/jenkins/.cache/Cypress
                            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | tee /etc/apt/trusted.gpg.d/google.asc >/dev/null
                            mkdir -p /usr/share/man/man1/
                            apt update && apt install -y default-jre openjdk-17-jdk zip
                            npm install
                            npm install @shelex/cypress-allure-plugin allure-mocha crypto-js@4.1.1 --save-dev
                        '''
                    }
                }
            }
        }

        stage('Executar') {
            steps {
                dir("${CONFIG_PATH}") {
                    script {
                        sh '''
                            NO_COLOR=1 npx cypress run \
                                --headless \
                                --config-file ../../cypress.config.js \
                                --spec cypress/e2e/**/* \
                                --reporter mocha-allure-reporter \
                                --browser chrome
                        '''
                    }
                }
            }
        }

        stage('Generate Allure Report') {
            steps {
                script {
                    sh '''
                        java -version
                        export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
                        export PATH=$JAVA_HOME/bin:/usr/local/bin:$PATH
                        echo "JAVA_HOME=$JAVA_HOME"
                        echo "PATH=$PATH"

                        npm install -g allure-commandline

                        # Copia os resultados para o local esperado
                        mkdir -p allure-results
                        cp -r SME-PTRF-BackEnd/tests/api/allure-results/* allure-results/

                        # Gera o relat√≥rio
                        allure generate allure-results --clean --output allure-report

                        # Compacta os resultados, se quiser
                        zip -r allure-results-${BUILD_NUMBER}-$(date +"%d-%m-%Y").zip allure-results
                    '''
                }
            }
        }

    }




//     post {
//         always {
//             script {
//                 sh 'chmod -R 777 $WORKSPACE_DIR'
//                 if (currentBuild.result == 'SUCCESS' || currentBuild.result == 'FAILURE') {
//                     allure includeProperties: false, jdk: '', results: [[path: 'allure-results']]
//                     archiveArtifacts artifacts: 'allure-results-*.zip', fingerprint: true
//                 }
//             }
//         }

//         success {
//             sendTelegram("‚òëÔ∏è Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Success \nLog: \n${env.BUILD_URL}allure")
//         }

//         unstable {
//             sendTelegram("üí£ Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Unstable \nLog: \n${env.BUILD_URL}allure")
//         }

//         failure {
//             sendTelegram("üí• Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Failure \nLog: \n${env.BUILD_URL}allure")
//         }

//         aborted {
//             sendTelegram ("üò• Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Aborted \nLog: \n${env.BUILD_URL}console")
//         }
//     }
// }

// def sendTelegram(message) {
//     def encodedMessage = URLEncoder.encode(message, "UTF-8")
//     withCredentials([
//         string(credentialsId: 'telegramTokensigpae', variable: 'TOKEN'),
//         string(credentialsId: 'telegramChatIdsigpae', variable: 'CHAT_ID')
//     ]) {
//         response = httpRequest (
//             consoleLogResponseBody: true,
//             contentType: 'APPLICATION_JSON',
//             httpMode: 'GET',
//             url: "https://api.telegram.org/bot${TOKEN}/sendMessage?text=${encodedMessage}&chat_id=${CHAT_ID}&disable_web_page_preview=true",
//             validResponseCodes: '200'
//         )
//         return response
//     }
}