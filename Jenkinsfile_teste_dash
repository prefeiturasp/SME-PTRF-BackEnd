pipeline {
    agent {
        label 'cypress-node'
    }

    // triggers {
    //     cron('30 20 * * 0-5')
    // }

    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
        disableConcurrentBuilds()
        skipDefaultCheckout()
    }

    environment {
        TEST_DIR = 'tests/api'
        ALLURE_PATH = 'tests/api/allure-results'
        WORKSPACE_DIR = "${env.WORKSPACE}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Executar') {
            steps {
                withDockerRegistry(credentialsId: 'jenkins_registry', url: 'https://registry.sme.prefeitura.sp.gov.br/repository/sme-registry/') {
                    sh '''#!/bin/bash
                        docker run \
                            --rm \
                            -v "tests/api:/app" \
                            -w /app \
                            registry.sme.prefeitura.sp.gov.br/devops/cypress-agent:14.5.2 \
                            sh -c "npm install && npm install cypress@14.5.2 cypress-cloud@beta && \
                                    npx cypress-cloud run \
                                        --browser chrome \
                                        --headed true \
                                        --spec cypress/e2e/**/* \
                                        --record \
                                        --key somekey \
                                        --reporter mocha-allure-reporter \
                                        --ci-build-id PTRF-BACKEND-${BUILD_NUMBER}"
                    '''
                }
            }
        }

        stage('Generate Allure Report') {
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                        def hasResults = fileExists("${ALLURE_PATH}") && sh(script: "ls -A ${ALLURE_PATH} | wc -l", returnStdout: true).trim() != "0"

                        if (hasResults) {
                            echo "Gerando relat칩rio Allure..."
                            sh """
                                export JAVA_HOME=\$(dirname \$(dirname \$(readlink -f \$(which java)))); \
                                export PATH=\$JAVA_HOME/bin:/usr/local/bin:\$PATH; \
                                allure generate ${ALLURE_PATH} --clean --output tests/api/allure-report; \
                                cd tests/api; \
                                zip -r allure-results-${BUILD_NUMBER}-\$(date +"%d-%m-%Y").zip allure-results
                            """
                        } else {
                            echo "丘멆잺 Diret칩rio ${ALLURE_PATH} est치 ausente ou vazio. Pulando gera칞칚o do relat칩rio."
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                sh 'chmod -R 777 $WORKSPACE/tests/api || true'

                if (fileExists("${ALLURE_PATH}") && sh(script: "ls -A ${ALLURE_PATH} | wc -l", returnStdout: true).trim() != "0") {
                    allure includeProperties: false, jdk: '', results: [[path: "${ALLURE_PATH}"]]
                } else {
                    echo "丘멆잺 Resultados do Allure n칚o encontrados ou vazios, plugin Allure n칚o ser치 acionado."
                }

                def zipExists = sh(script: "ls tests/api/allure-results-*.zip 2>/dev/null || true", returnStdout: true).trim()
                if (zipExists) {
                    archiveArtifacts artifacts: 'tests/api/allure-results-*.zip', fingerprint: true
                } else {
                    echo "丘멆잺 Nenhum .zip de Allure encontrado para arquivamento. Pulando archiveArtifacts."
                }
            }
            
            cleanWs(patterns: [[pattern: '*.zip', type: 'EXCLUDE']])
        }

    //     success {
    //         sendTelegram("驕놾잺 Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Success \nLog: \n${env.BUILD_URL}allure")
    //     }

    //     unstable {
    //         sendTelegram("游눢 Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Unstable \nLog: \n${env.BUILD_URL}allure")
    //     }

    //     failure {
    //         sendTelegram("游눤 Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Failure \nLog: \n${env.BUILD_URL}allure")
    //     }

    //     aborted {
    //         sendTelegram("游땬 Job Name: ${JOB_NAME} \nBuild: ${BUILD_DISPLAY_NAME} \nStatus: Aborted \nLog: \n${env.BUILD_URL}console")
    //     }
    }
}

// def sendTelegram(message) {
//     def encodedMessage = URLEncoder.encode(message, "UTF-8")
//     withCredentials([
//         string(credentialsId: 'telegramTokensigpae', variable: 'TOKEN'),
//         string(credentialsId: 'telegramChatIdsigpae', variable: 'CHAT_ID')
//     ]) {
//         response = httpRequest (
//             consoleLogResponseBody: true,
//             contentType: 'APPLICATION_JSON',
//             httpMode: 'GET',
//             url: "https://api.telegram.org/bot${TOKEN}/sendMessage?text=${encodedMessage}&chat_id=${CHAT_ID}&disable_web_page_preview=true",
//             validResponseCodes: '200'
//         )
//         return response
//     }
// }
